我已在docker中部署了 kong， 如何让它将didilinkin.cn:80端口绑定到 一个本地的静态网站文件夹内呢

1. 在 Docker 中运行一个 Nginx 容器的静态站
```bash
docker run -d -p 80:80 -v /path/to/your/static/files:/usr/share/nginx/html --name my-blog-container nginx
```

这个命令将在 Docker 中启动一个 Nginx 容器，将其绑定到主机的 80 端口
并将 `/path/to/your/static/files` 目录挂载到容器的 `/usr/share/nginx/html` 目录中。








2. 在 Kong 中创建一个 Service 对象，该对象将代理到本地的 Nginx 容器

例如，可以使用以下命令：

```bash
curl -i -X POST \
  --url http://localhost:8001/services/ \
  --data 'name=my-blog-service' \
  --data 'url=http://my-blog-container'
```

# 不需要 端口
# --data 'url=http://my-blog-container:8010'
# --data 'url=http://172.17.0.2:8010'

这个命令将创建一个名为 `my-blog-service` 的 Service 对象，并将其代理到名为 `my-blog-container` 的容器中的 Nginx 服务









3. 创建一个 Route 对象，将 Service 对象映射到一个路径

```bash
# 防止刷新页面 url改变
# 将 strip_path 参数设置为 false，这样 Kong 将不会去掉请求路径中的前缀
#
# 将 preserve_host 参数设置为 true，这样 Kong 将保留原始请求的主机名; 通常用于防止 URL 刷新丢失

curl -i -X POST \
  --url http://localhost:8001/services/my-blog-service/routes \
  --data 'hosts[]=didilinkin.cn' \
  --data 'paths[]=/' \
  --data 'strip_path=false' \
  --data 'preserve_host=true'
```



这个命令将创建一个名为 `didilinkin.cn` 的 Route 对象，并将其映射到根路径 `/`
这意味着当你访问 `http://didilinkin.cn/` 时，Kong 将代理到本地的 Nginx 容器中的静态网站文件夹







4. 确认 Kong 代理已经启动，并且代理的地址设置为 http://localhost:8000

```bash
curl -i http://localhost:8000/ --header 'Host: didilinkin.cn'
```

这个命令将发送一个到 `didilinkin.cn` 的请求，并将请求发送到 Kong 的代理地址 `http://localhost:8000`
Kong 将根据 Route 的配置，将请求转发到 Docker 容器中运行的服务，即 `http://my-blog-container:8010/`


需要注意的是，上面的示例假设你已经将静态网站文件夹挂载到了 Docker 容器中，并在容器中将其位置设置为 /usr/share/nginx/html

你需要根据你自己的实际情况来修改这些命令和配置






~~~~~~~~~~~~~~~



如果你要删除一个 Service 对象，你需要先删除与它相关联的所有 Route 对象。你可以使用以下命令来列出与 Service 对象相关联的所有 Route 对象：

curl -sS http://localhost:8001/services/my-blog-service/routes | jq '.data[] | {id: .id, name: .name}'








这个命令使用 curl 发送一个 GET 请求，获取名为 my-blog-service 的 Service 对象的所有 Route 对象，并使用 jq 工具以格式化输出。输出将列出每个 Route 对象的 ID 和名称。
然后，你可以使用以下命令来删除与 Service 对象相关联的所有 Route 对象：

curl -i -X DELETE http://localhost:8001/routes/{route_id}

# 用于操作
curl -i -X DELETE http://localhost:8001/routes/






其中，{route_id} 是要删除的 Route 对象的 ID。你需要使用上一个命令中列出的 ID 来替换 {route_id}。

当你删除所有与 Service 对象相关联的 Route 对象后，你可以再次运行删除 Service 对象的命令：

curl -i -X DELETE --url http://localhost:8001/services/my-blog-service



～～～～～～～～～～～～～


查看 kong已配置的所有 router和 service

要查看 Kong 中已配置的所有路由器和服务，可以使用 Kong 的 Admin API。

使用 curl 命令或其他 HTTP 客户端工具，向 Kong 的 Admin API 发送 GET 请求，以获取所有已配置的服务列表。例如：
Copy


curl -i http://localhost:8001/services/


这将返回一个 JSON 格式的服务列表，其中包含已配置的所有服务的详细信息，包括服务 ID、名称、URL 和其他属性。

对于每个服务，你可以使用其服务 ID 获取与该服务关联的所有路由器列表。例如：
Copy


curl -i http://localhost:8001/services/{service_id}/routes


将 {service_id} 替换为实际的服务 ID，这将返回一个 JSON 格式的路由器列表，其中包含与该服务关联的所有路由器的详细信息，包括路由器 ID、名称、路径和其他属性

需要注意的是，如果 Kong 已经配置了多个上游服务和路由器，则服务和路由器的数量可能会非常大

在这种情况下，你可能需要使用过滤器或其他查询参数来缩小结果集，以便更轻松地查看和管理配置



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~




以下是一个示例命令，用于将 gzip 插件添加到 Kong 的 plugins 配置属性中：

```bash
curl -X POST http://localhost:8001/services/my-blog-service/plugins \
    --data "name=gzip"
```

在这个示例中，你需要将 {service} => [my-blog-service] 替换为你要添加插件的服务名称或 ID
这个命令将在指定服务上添加 gzip 插件。添加完插件后，你就可以像之前那样使用 gzip 插件中的相关属性了。

需要注意的是，Kong 的插件需要在服务上启用才能使用。如果你的服务还没有启用插件，请参考 Kong 的官方文档来启用插件。


curl -X POST http://localhost:8001/services/my-blog-service/plugins \
    --data "name=response-transformer" \
    --data "config.add.headers=Content-Encoding:gzip"



























这个命令将使用curl发送一个HEAD请求到https://didilinkin.cn，并请求压缩的响应
"--compressed"选项告诉curl自动解压缩响应


curl -I --compressed https://didilinkin.cn


```bash
HTTP/1.1 200 OK
Server: nginx
Date: Wed, 19 May 2023 02:38:37 GMT
Content-Type: text/html; charset=UTF-8
Content-Length: 3632
Connection: keep-alive
Vary: Accept-Encoding
Content-Encoding: gzip
```

这个响应表明服务器使用gzip压缩了响应
"Content-Encoding: gzip"标头指示响应已经被gzip压缩，并且curl自动解压缩了响应，以显示未压缩的内容

如果服务器未使用gzip压缩响应，那么响应中将不会包含"Content-Encoding: gzip"标头
在这种情况下，curl将显示未压缩的响应内容
